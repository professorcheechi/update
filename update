#!/bin/zsh

###############
# Functions   #
###############

usage() { #help
  printf "\nUsage: With no flag, update will automate the update process by running sudo apt update then apt list --updates \
  \nThe user can review the list and decide to upgrade packages \
  \n\nupdate can also be used with the following flags; \
  \n\t-f sudo apt full-upgrade - for release updates (ie from 20.04LTS to 22.04LTS) \
  \n\t-h displays this help message \
  \n\t-p for [Pop!_OS], run pop-upgrade release upgrade - (should be run only after all other updates completed) \
  \n\t-q 'quiet' operation, no interaction needed \
  \n\t-r update but do not run autoremove at the end \
  \n\t-s if important updates have been held back, aptitude safe-update \ 
  \n\t-u check for updates but do not upgrade \
  \n\t-v show version info for both kernel & distro \
  \n\t-x if apt can't install updates; \
  \n\t\t purges apt config files, \
  \n\t\t gets fresh config files, \
  \n\t\t resolves package conflicts, \
  \n\t\t then try to upgrade again \
  \n\t-y same as -x but do not try again to update \
  \n\n"
}

badflag() { # any invalid argument
  printf "\n\nInvalid flag or argument: \n"
  usage && exit 1
}

sudo_check() {
  if [ "$(id -u)" -ne 0 ]; then
    printf "\n\t$0 must be run as sudo\n\n"
    usage && exit 3
  else
    sudook=1
  fi
}

version_check() {
  printf "Linux Kernel "
  uname -r
  printf "Debian version: "
  cat /etc/debian_version
  printf "\n"
  lsb_release -a
}

update_check() {
  #if [ -z "$errorretry" ]; then
    printf "\nsudo apt-get update\n"
    apt-get update
  #fi
  printf "\napt-get list --upgradeable\n"
  apt list --upgradeable
}

noflag() { #if no flags are specified
  version_check
  update_check
  printf "\nUpdate? Y/N "
  read updatechoice
  case $updatechoice in
    [yY]) printf "\n" && autoupgrade ;;
    [nN]) exit 0 ;;
       *) exit 4 ;;
  esac
}

popos() { # check if System76 Pop!_OS
  if [ -n "$(cat /etc/os-release | grep  "Pop\!_OS")" ]; then
    update_check && pop-upgrade release upgrade
  else
    badflag
  fi
}

autoremove() {
  printf "\n sudo apt autoremove \n"
  apt-get -y autoremove
}

autoupgrade() {
  apt-get -y upgrade
}

autofull() {
  apt-get -y full-upgrade
}

safe_update() {
  if [ -n "$(which aptitude | grep "not found")" ]; then
    apt-get -y aptitude
  fi
  aptitude safe-upgrade
}


clearerrors() { # https://superuser.com/questions/1732810/pop-os-22-04-cant-update-gir1-2-mutter-10-libmutter-10-0

  # purge old apt configuration files
  rm -rf /var/lib/apt/lists/
  apt-get -y clean
  apt-get -y autoclean

  # get fresh configuration files, resolve package conflicts
  updatecheck
  sudo dpkg --configure -a
  sudo apt --fix-broken install

  ## and finally resume the upgrade unless flag prevents
  if [ -z "$noretry" ]; then
    apt-get -y upgrade
  fi
}

###############
# Main        #
###############

if [ -n "$1" ]; then
  if [ -z "$(echo "$1" | grep "-")" ]; then # this script accepts flags eg -h, not args
    badflag
  fi

  while getopts ":cfhpqrsuvxy" flag ; do
    case $flag in
      c) sudo_check && sed -i 's/bullseye/bookworm/g' /etc/apt/sources.list       ;; # not listed in help 
      f) version_check && sudo_check && update_check && autofull && autoremove    ;;
      h) usage && exit 0                                                          ;;
      p) sudo_check && popos                                                      ;;
      q) version_check && sudo_check && update_check && autoupgrade && autoremove ;;
      r) sudo_check && update_check && sudo apt full-upgrade                      ;;
      s) version_check && sudo_check && update_check && safe_update               ;;
      u) version_check && sudo_check && update_check                              ;;
      v) version_check                                                            ;;
      x) sudo_check && clearerrors                                                ;;
      y) noretry=1 && sudo_check && clearerrors                                   ;;
      *) badflag                                                                  ;;
    esac
  done

else
  noflag
fi

###############
# exit status #
###############

# 4 user chooses no
# 3 not sudo
# 1 invalid or no entry


###############
# Notes       #
###############

## updating major versions eg bullseye to bookworm (11 to 12)
## sudo sed -i 's/bullseye/bookworm/g' /etc/apt/sources.list
## sudo update -f

###############
# fin         #
###############
