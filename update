#!/bin/zsh

usage(){ #help
  printf "\nUsage: With no flag, update will automate the update process by running sudo apt update then apt list --updates \
  \nThe user can review the list and decide to upgrade packages \
  \n\nupdate can also be used with the following flags; \
  \n\t-h displays this help message \
  \n\t-p for [Pop!_OS], run pop-upgrade release upgrade - (should be run only after all other updates completed) \
  \n\t-f sudo apt full-upgrade - for release updates (ie from 20.04LTS to 22.04LTS) \
  \n\t-x if apt can't install updates; \
  \n\t\t purge apt config files, \
  \n\t\t get fresh config files, \
  \n\t\t resolve package conflicts, \
  \n\t\t & try again \
  \n\t-y same as -x but do not try again to update \
  \n\t-r update but do not run autoremove at the end \n\n"
  exit 1
}


sudo_check(){
  if [ "$(id -u)" -ne 0 ]; then
    printf "\n\t$0 must be run as sudo\n\n"
    usage && exit 3
  else
    sudook=1
  fi
}

update_check(){
  if [ -z "$errorretry" ]; then
    printf "\nsudo apt update\n"
    apt update
  fi
  printf "\napt list --upgradeable\n"
  apt list --upgradeable
}

noflag(){ #if no flags are specified
  update_check
  printf "\nUpdate? Y/N "
  read updatechoice
  case $updatechoice in
    [yY]) printf "\n" && apt upgrade -y;;
    [nN]) exit 0 ;;
       *) exit 2 ;;
  esac
}

badflag() { # any invalid argument
  printf "\n\nInvalid flag or argument: \n"
  usage && exit 1
}

popos() { # check if System76 Pop!_OS
  if [ -n "$(cat /etc/os-release | grep  "Pop\!_OS")" ]; then
    update_check && pop-upgrade release upgrade
  else
    badflag
  fi
}

autoremove() {
  printf "\n sudo apt autoremove \n"
  apt autoremove
}


clearerrors() { # https://superuser.com/questions/1732810/pop-os-22-04-cant-update-gir1-2-mutter-10-libmutter-10-0

  # purge old apt configuration files
  sudo rm -rf /var/lib/apt/lists/
  sudo apt clean
  sudo apt autoclean

  # get fresh configuration files, resolve package conflicts
  sudo apt update
  sudo dpkg --configure -a
  sudo apt --fix-broken install

  ## and finally resume the upgrade unless flag prevents
  if [ -z "$noretry" ]; then
    sudo apt upgrade -y
  fi
}

 ------------Main--------------------------------------

sudo_check


if [ -n "$1" ]; then
  if [ -z "$(echo "$1" | grep "-")" ]; then # not a flag
    badflag
  fi

  while getopts ":hpfxr" flag ; do
    case $flag in
      h) usage && exit 0;;
      p) popos;;
      f) update_check && sudo apt full-upgrade && autoremove;;
      x) clearerrors;;
      y) noretry=1 && clearerrors;;
      r) update_check && sudo apt full-upgrade;;
      *) badflag;;
    esac
  done
else
noflag
fi

# ---------------------------------------------------------
# exit status
# 3 not sudo
# 2 user chooses no
# 1 invalid or no entry
# ---------------------------------------------------------

# fin
