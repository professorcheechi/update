#!/bin/bash

#HELP00:           Script Name: update
#HELP01:               Purpose: simplify system updates across multiple debian based distros
#HELP02:                 Owner:  
#HELP03:               License:  GPL v3.0
#HELP04:               Created:  August 2020
#HELP05:              Category:  system utilities
#HELP06:            Input File:  stdin
#HELP07:           Output File:  stdout, /bin, /usr/bin, /sbin, etc
#HELP08:              Log path:  
#HELP09:                Syntax:  sudo update -q
#HELP10:               Example:  sudo update -q
#HELP11:              Commands:  apt, nala, apt-get
#HELP12:      Production Files:  
#HELP13:    Ancillary Programs:  pop-upgrade
#HELP14:     Ancillary Scripts:
#HELP15:         Local Scripts:
#HELP16: crontask/systemd srvc:
#HELP17: task/service schedule:
#HELP18:        Kernel Version: >2.6
#HELP19:            DB Version:
#HELP20:            Audit Date:
#HELP21:               Auditor:
#HELP22:       Approve Date(s):
#HELP23:           Approver(s):
#HELP24: Date Checked Into CVS:
#HELP25:   Checked Into CVS By:
#HELP26:               Version:  1.5
#HELP27:               Changes:
#HELP28:            Github url: https://github.com/professorcheechi/update/
#HELP29:
#HELP30:

##############################################################
# Version history ############################################
##############################################################

# 1.0 automate update/upgrade, 1 script for both
# 1.1 add pop-upgrade for Pop!_OS
# 1.2 additional options & flags
# 1.3 further adding features, formatting
# 1.4 aptitude for safe update/ "held back" updates
# 1.5 add nala functionality, formatting

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Exit codes !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# 6 multiple os versions/codenames in /etc/apt/sources.list
# 5 invalid or no entry
# 4 user chooses no
# 3 not sudo


##############################################################
# flow of script / notes / todo ##############################
##############################################################

## updating major versions eg bullseye to bookworm (11 to 12)
## sudo sed -i 's/bullseye/bookworm/g' /etc/apt/sources.list
## sudo update -f

#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
# Define functions {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}

usage() { #help
  printf "\nUsage: With no flag, update will automate the update process by running sudo apt update then apt list --updates \
  \nThe user can review the list and decide to upgrade packages \
  \n\nupdate can also be used with the following flags; \
  \n\t -b apt --fix-broken install \
  \n\t -f sudo apt full-upgrade - for release updates (ie from 20.04LTS to 22.04LTS) \
  \n\t -h displays this help message \
  \n\t -p for [Pop!_OS], run pop-upgrade release upgrade - (should be run only after all other updates completed) \
  \n\t -q 'quiet' operation, no interaction needed \
  \n\t -r update but do not run autoremove at the end \
  \n\t -s if important updates have been held back, aptitude safe-update \
  \n\t -u check for updates but do not upgrade \
  \n\t -v show version info for both kernel & distro \
  \n\t -x if apt can't install updates; \
  \n\t\t purges apt config files, \
  \n\t\t gets fresh config files, \
  \n\t\t resolves package conflicts, \
  \n\t\t then try to upgrade again \
  \n\t -y same as -x but do not try again to update \
  \n\n"
}

badflag() { # any invalid argument
  printf "\n\nInvalid flag or argument: \n"
  usage && exit 1
}

sudo_check() {
  if [ "$(id -u)" -ne 0 ]; then
    printf "\n\t$0 must be run as sudo\n\n"
    usage && exit 3
  else
    sudook=1
  fi
}

version_check() {
  printf "\nLinux Kernel "
  uname -r
  printf "Debian version: "
  cat /etc/debian_version
  printf "\n"
  lsb_release -a
}

nalacheck() {
  nalasources=/etc/apt/sources.list.d/nala-sources.list
  which nala | grep -qi 'not found' || nalaok=1
}

update_check() {
  if (( "$nalaok" = 1 )); then
    if ! [ -f "$nalasources" ]; then
      nala fetch -y --auto --fetches 8 --country US
    fi

    printf "\n sudo nala --update \n"
    nala --update
    printf "\n Upgradeable packages: \b"
    nala list -u
  else
    printf "\n sudo apt-get update \n"
    apt-get update
    printf "\n Upgradeable packages: \b"
    apt list --upgradeable
  fi
}

clean() {
  sudo apt-get clean
}

########### wip 
version_change() {

  #check if debian, ubuntu, pop, etc 
  lsb=(lsb_release -a)
  distributor=(echo "$lsb" | grep Distributor | awk '{print $3}')
  codename=(echo "$lsb" | grep Codename | awk '{print $2}')
  
  if [[ "$distributor" -ne "Debian" ]]; then
    printf "\n Currently this function only works on Debian, no derivative distros \n"
    exit 7
  fi


  current_name=(cat /etc/apt/sources.list | grep deb | awk '{print $3}' | sort -u)
  case $current_name in
    1) 
        if [[ "$codename" -eq "$current_name" ]]; then
          printf "\n New OS codename: \n"
          read new_name 
        fi ;;
    *) printf "\n Please review /etc/apt/sources.list we will not automatically update it as multiple versions are listed among sources \n"
       exit 6 ;;
  esac

  # need to validate the new name and/or automate. can we wget or curl so user input is not necessary?
  # curl -L -s https://www.debian.org/releases/stable/releasenotes | grep -i "release information" | awk '{print $4}' | sed 's/&ldquo;//g;s/&rdquo;//g'



  if (( "$nalaok" = 1 )); then
    sed -i "s/$current_name/$new_name/g" /etc/apt/sources.list.d/nala-sources.list
  fi

  # debian
  sed -i "s/$current_name/$new_name/g" /etc/apt/sources.list

  # Pop!_OS
  # /etc/apt/sources.list.d
  # .../pop-os-apps.sources
  # .../pop-os-release.sources
  # .../system.sources
  ## these would be updated with pop-upgrade this function should not be run on Pop!_OS

}
########### wip 


noflag() { #if no flags are specified
  version_check
  update_check
  printf "\nUpdate? Y/N "
  read updatechoice
  case $updatechoice in
    [yY]) printf "\n" && autoupgrade ;;
    [nN]) exit 5 ;;
       *) exit 4 ;;
  esac
}

popos() { # check if System76 Pop!_OS
  if [ -n "$(cat /etc/os-release | grep  "Pop\!_OS")" ]; then
    update_check && pop-upgrade release upgrade
  else
    badflag
  fi
}

autoremove() {
  if (( "$nalaok" = 1 )); then
    printf "\n nala autoremove -y \n"
    nala autoremove -y
    #nala autopurge
  else
    printf "\n sudo apt autoremove \n"
    apt-get -y autoremove
  fi
}

autoupgrade() {
  if (( "$nalaok" = 1 )); then
     nala upgrade -y --no-full
  else
    apt-get -y upgrade
  fi
}

autofull() {
  if (( "$nalaok" = 1 )); then
    nala upgrade -y --full  
  else
    apt-get -y full-upgrade
  fi
}

safe_update() {
  which aptitude | grep -qi "not found" && apt-get -y aptitude
  aptitude safe-upgrade
}

fix_broken() {
  sudo apt --fix-broken install
}

clearerrors() { # https://superuser.com/questions/1732810/pop-os-22-04-cant-update-gir1-2-mutter-10-libmutter-10-0
  # purge old apt configuration files
  rm -rf /var/lib/apt/lists/

  apt-get -y clean
  apt-get -y autoclean

  # get fresh configuration files, resolve package conflicts
  updatecheck
  sudo dpkg --configure -a
  fix_broken

  ## and finally resume the upgrade unless flag prevents
  if [ -z "$noretry" ]; then
    apt-get -y upgrade
  fi
}

##############################################################
# main program ###############################################
##############################################################

if [ -n "$1" ]; then
  if [ -z "$(echo "$1" | grep "-")" ]; then # this script accepts flags eg -h, not args
    badflag
  fi

  nalacheck

  while getopts ":bcfhpqrsuvxy" flag ; do
    case $flag in
      b) sudo_check && fix_broken                                                 ;;
      c) sudo_check && version_change                                             ;; # purposely not listed in help 
      f) version_check && sudo_check && update_check && autofull && autoremove    ;;
      h) usage && exit 0                                                          ;;
      p) sudo_check && popos                                                      ;;
      q) version_check && sudo_check && update_check && autoupgrade && autoremove ;;
      r) sudo_check && update_check && sudo apt full-upgrade                      ;;
      s) version_check && sudo_check && update_check && safe_update               ;;
      u) version_check && sudo_check && update_check                              ;;
      v) version_check                                                            ;;
      x) sudo_check && clearerrors                                                ;;
      y) noretry=1 && sudo_check && clearerrors                                   ;;
      *) badflag                                                                  ;;
    esac
  done

else
  noflag
fi

##############################################################
# End ########################################################
##############################################################
